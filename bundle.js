!function(){"use strict";function e(r,t,i,n){if(!function(e,r,t,i){let n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,r,4,4,0,t,i,null);let a=e.createFramebuffer();return e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0),e.checkFramebufferStatus(e.FRAMEBUFFER)==e.FRAMEBUFFER_COMPLETE}(r,t,i,n))switch(t){case r.R16F:return e(r,r.RG16F,r.RG,n);case r.RG16F:return e(r,r.RGBA16F,r.RGBA,n);default:return null}return{internalFormat:t,format:i}}class r{constructor(e,r,t){this.gl=e;let i=this.compileShader(e.VERTEX_SHADER,r),n=this.compileShader(e.FRAGMENT_SHADER,t);if(this.uniforms={},this.program=e.createProgram(),e.attachShader(this.program,i),e.attachShader(this.program,n),e.linkProgram(this.program),!e.getProgramParameter(this.program,e.LINK_STATUS))throw e.getProgramInfoLog(this.program);const a=e.getProgramParameter(this.program,e.ACTIVE_UNIFORMS);for(let r=0;r<a;r++){const t=e.getActiveUniform(this.program,r).name;this.uniforms[t]=e.getUniformLocation(this.program,t)}}use(){this.gl.useProgram(this.program)}compileShader(e,r){let t=this.gl;const i=t.createShader(e);if(t.shaderSource(i,r),t.compileShader(i),!t.getShaderParameter(i,t.COMPILE_STATUS))throw t.getShaderInfoLog(i);return i}}const t="\nprecision highp float;\nprecision mediump sampler2D;\n\nattribute vec2 aPosition;\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform vec2 texelSize;\n\nvoid main () {\n    vUv = aPosition * 0.5 + 0.5;\n    vL = vUv - vec2(texelSize.x, 0.0);\n    vR = vUv + vec2(texelSize.x, 0.0);\n    vT = vUv + vec2(0.0, texelSize.y);\n    vB = vUv - vec2(0.0, texelSize.y);\n    gl_Position = vec4(aPosition, 0.0, 1.0);\n}\n",i="\nprecision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 vUv;\nuniform sampler2D uTarget;\nuniform float aspectRatio;\nuniform vec3 color;\nuniform vec2 point;\nuniform float radius;\n\nvoid main () {\n    vec2 p = vUv - point.xy;\n    p.x *= aspectRatio;\n    vec3 splat = exp(-dot(p, p) / radius) * color;\n    vec3 base = texture2D(uTarget, vUv).xyz;\n    gl_FragColor = vec4(base + splat, 1.0);\n}\n",n="\nprecision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\nuniform float value;\n\nvoid main () {\n    gl_FragColor = value * texture2D(uTexture, vUv);\n}\n",a="\nprecision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 vUv;\nuniform sampler2D uTexture;\n\nvoid main () {\n    gl_FragColor = texture2D(uTexture, vUv);\n}\n",o="\nprecision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 vUv;\nuniform sampler2D uVelocity;\nuniform sampler2D uSource;\nuniform vec2 texelSize;\nuniform float dt;\nuniform float dissipation;\n\nvec4 bilerp (in sampler2D sam, in vec2 p) {\n    vec4 st;\n    st.xy = floor(p - 0.5) + 0.5;\n    st.zw = st.xy + 1.0;\n    vec4 uv = st * texelSize.xyxy;\n    vec4 a = texture2D(sam, uv.xy);\n    vec4 b = texture2D(sam, uv.zy);\n    vec4 c = texture2D(sam, uv.xw);\n    vec4 d = texture2D(sam, uv.zw);\n    vec2 f = p - st.xy;\n    return mix(mix(a, b, f.x), mix(c, d, f.x), f.y);\n}\n\nvoid main () {\n    vec2 coord = gl_FragCoord.xy - dt * texture2D(uVelocity, vUv).xy;\n    gl_FragColor = dissipation * bilerp(uSource, coord);\n    gl_FragColor.a = 1.0;\n}\n",u="\nprecision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\n\nvec2 sampleVelocity (in vec2 uv) {\n    vec2 multiplier = vec2(1.0, 1.0);\n    if (uv.x < 0.0) { uv.x = 0.0; multiplier.x = -1.0; }\n    if (uv.x > 1.0) { uv.x = 1.0; multiplier.x = -1.0; }\n    if (uv.y < 0.0) { uv.y = 0.0; multiplier.y = -1.0; }\n    if (uv.y > 1.0) { uv.y = 1.0; multiplier.y = -1.0; }\n    return multiplier * texture2D(uVelocity, uv).xy;\n}\n\nvoid main () {\n    float L = sampleVelocity(vL).x;\n    float R = sampleVelocity(vR).x;\n    float T = sampleVelocity(vT).y;\n    float B = sampleVelocity(vB).y;\n    float div = 0.5 * (R - L + T - B);\n    gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n}\n",s="\nprecision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\n\nvoid main () {\n    float L = texture2D(uVelocity, vL).y;\n    float R = texture2D(uVelocity, vR).y;\n    float T = texture2D(uVelocity, vT).x;\n    float B = texture2D(uVelocity, vB).x;\n    float vorticity = R - L - T + B;\n    gl_FragColor = vec4(vorticity, 0.0, 0.0, 1.0);\n}\n",l="\nprecision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 vUv;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\nuniform sampler2D uCurl;\nuniform float curl;\nuniform float dt;\n\nvoid main () {\n    float T = texture2D(uCurl, vT).x;\n    float B = texture2D(uCurl, vB).x;\n    float C = texture2D(uCurl, vUv).x;\n    \n    vec2 force = vec2(abs(T) - abs(B), 0.0);\n   \n   force *= 1.0 / length(force + 0.00001) * curl * C;\n    vec2 vel = texture2D(uVelocity, vUv).xy;\n    gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n}\n",v="\nprecision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uPressure;\nuniform sampler2D uDivergence;\n\nvec2 boundary (in vec2 uv) {\n    uv = min(max(uv, 0.0), 1.0);\n    return uv;\n}\n\nvoid main () {\n    float L = texture2D(uPressure, boundary(vL)).x;\n    float R = texture2D(uPressure, boundary(vR)).x;\n    float T = texture2D(uPressure, boundary(vT)).x;\n    float B = texture2D(uPressure, boundary(vB)).x;\n    float C = texture2D(uPressure, vUv).x;\n    float divergence = texture2D(uDivergence, vUv).x;\n\n    float pressure = (L + R + B + T - divergence) * 0.25;\n    gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n}\n",m="\nprecision highp float;\nprecision mediump sampler2D;\n\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uPressure;\nuniform sampler2D uVelocity;\n\nvec2 boundary (in vec2 uv) {\n    uv = min(max(uv, 0.0), 1.0);\n    return uv;\n}\n\nvoid main () {\n    float L = texture2D(uPressure, boundary(vL)).x;\n    float R = texture2D(uPressure, boundary(vR)).x;\n    float T = texture2D(uPressure, boundary(vT)).x;\n    float B = texture2D(uPressure, boundary(vB)).x;\n    vec2 velocity = texture2D(uVelocity, vUv).xy;\n    velocity.xy -= vec2(R - L, T - B);\n    gl_FragColor = vec4(velocity, 0.0, 1.0);\n}\n";let f=0,c={TEXTURE_DOWNSAMPLE:1,DENSITY_DISSIPATION:.98,VELOCITY_DISSIPATION:.99,PRESSURE_DISSIPATION:.8,PRESSURE_ITERATIONS:25,CURL:30,SPLAT_RADIUS:.005};function h(){this.id=-1,this.x=0,this.y=0,this.dx=0,this.dy=0,this.down=!1,this.moved=!1,this.color=[30,0,300]}(new class{createDoubleFBO(e,r,t,i){let n=this.createFBO(e,r,t,i),a=this.createFBO(e,r,t,i);return{get read(){return n},get write(){return a},swap(){let e=n;n=a,a=e}}}createFBO(e,r,t,i){let{gl:n,textureWidth:a,textureHeight:o}=this;n.activeTexture(n.TEXTURE0+f);let u=n.createTexture();n.bindTexture(n.TEXTURE_2D,u),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,i),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,i),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texImage2D(n.TEXTURE_2D,0,e,a,o,0,r,t,null);let s=n.createFramebuffer();n.bindFramebuffer(n.FRAMEBUFFER,s),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,u,0),n.viewport(0,0,a,o),n.clear(n.COLOR_BUFFER_BIT);let l=f;return f+=1,[u,s,l]}initFramebuffers(){let{gl:e,ext:r}=this;this.textureWidth=e.drawingBufferWidth>>c.TEXTURE_DOWNSAMPLE,this.textureHeight=e.drawingBufferHeight>>c.TEXTURE_DOWNSAMPLE;const t=r.halfFloatTexType,i=r.formatRGBA,n=r.formatRG,a=r.formatR;this.velocity=this.createDoubleFBO(n.internalFormat,n.format,t,r.supportLinearFiltering?e.LINEAR:e.NEAREST),this.density=this.createDoubleFBO(i.internalFormat,i.format,t,r.supportLinearFiltering?e.LINEAR:e.NEAREST),this.divergence=this.createFBO(a.internalFormat,a.format,t,e.NEAREST),this.curl=this.createFBO(a.internalFormat,a.format,t,e.NEAREST),this.pressure=this.createDoubleFBO(a.internalFormat,a.format,t,e.NEAREST)}makePrograms(){let{gl:e,ext:f}=this;this.clearProgram=new r(e,t,n),this.displayProgram=new r(e,t,a),this.splatProgram=new r(e,t,i),this.advectionProgram=new r(e,t,o),this.divergenceProgram=new r(e,t,u),this.curlProgram=new r(e,t,s),this.vorticityProgram=new r(e,t,l),this.pressureProgram=new r(e,t,v),this.gradienSubtractProgram=new r(e,t,m)}constructor(){let r=document.getElementById("canvas");r.width=r.clientWidth,r.height=r.clientHeight,this.canvas=r;let{gl:t,ext:i}=function(r){const t={alpha:!1,depth:!1,stencil:!1,antialias:!1};let i=r.getContext("webgl2",t);const n=!!i;let a,o;n||(i=r.getContext("webgl",t)||r.getContext("experimental-webgl",t)),n?(i.getExtension("EXT_color_buffer_float"),o=i.getExtension("OES_texture_float_linear")):(a=i.getExtension("OES_texture_half_float"),o=i.getExtension("OES_texture_half_float_linear")),i.clearColor(0,0,0,1);const u=n?i.HALF_FLOAT:a.HALF_FLOAT_OES;let s,l,v;return n?(s=e(i,i.RGBA16F,i.RGBA,u),l=e(i,i.RG16F,i.RG,u),v=e(i,i.R16F,i.RED,u)):(s=e(i,i.RGBA,i.RGBA,u),l=e(i,i.RGBA,i.RGBA,u),v=e(i,i.RGBA,i.RGBA,u)),{gl:i,ext:{formatRGBA:s,formatRG:l,formatR:v,halfFloatTexType:u,supportLinearFiltering:o}}}(r);this.gl=t,this.ext=i,this.pointer=new h,this.initFramebuffers(),this.makePrograms(),this.blit=(()=>(t.bindBuffer(t.ARRAY_BUFFER,t.createBuffer()),t.bufferData(t.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,t.createBuffer()),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),t.STATIC_DRAW),t.vertexAttribPointer(0,2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(0),e=>{t.bindFramebuffer(t.FRAMEBUFFER,e),t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))()}bindEvents(){let{canvas:e,pointer:r}=this,t=this;e.addEventListener("mousemove",e=>{r.moved=r.down,r.dx=10*(e.offsetX-r.x),r.dy=10*(e.offsetY-r.y),r.x=e.offsetX,r.y=e.offsetY}),e.addEventListener("mousedown",()=>{r.down=!0,r.color=[Math.random()+.2,Math.random()+.2,Math.random()+.2]}),window.addEventListener("mouseup",()=>{r.down=!1}),window.onresize=()=>{t.resizeCanvas().bind(t)}}run(){this.lastTime=Date.now(),this.bindEvents(),this.multipleSplats(parseInt(2*Math.random())+4),this.update()}update(){let{gl:e,textureWidth:r,textureHeight:t,pointer:i,velocity:n,density:a,pressure:o,divergence:u,curl:s}=this,{advectionProgram:l,curlProgram:v,vorticityProgram:m,divergenceProgram:f,clearProgram:h,pressureProgram:g,gradienSubtractProgram:T,displayProgram:d}=this;const E=Math.min((Date.now()-this.lastTime)/1e3,.016);this.lastTime=Date.now(),e.viewport(0,0,r,t),l.use(),e.uniform2f(l.uniforms.texelSize,1/r,1/t),e.uniform1i(l.uniforms.uVelocity,n.read[2]),e.uniform1i(l.uniforms.uSource,n.read[2]),e.uniform1f(l.uniforms.dt,E),e.uniform1f(l.uniforms.dissipation,c.VELOCITY_DISSIPATION),this.blit(n.write[1]),n.swap(),e.uniform1i(l.uniforms.uVelocity,n.read[2]),e.uniform1i(l.uniforms.uSource,a.read[2]),e.uniform1f(l.uniforms.dissipation,c.DENSITY_DISSIPATION),this.blit(a.write[1]),a.swap(),i.moved&&(this.splat(i.x,i.y,i.dx,i.dy,i.color),i.moved=!1),v.use(),e.uniform2f(v.uniforms.texelSize,1/r,1/t),e.uniform1i(v.uniforms.uVelocity,n.read[2]),this.blit(s[1]),m.use(),e.uniform2f(m.uniforms.texelSize,1/r,1/t),e.uniform1i(m.uniforms.uVelocity,n.read[2]),e.uniform1i(m.uniforms.uCurl,s[2]),e.uniform1f(m.uniforms.curl,c.CURL),e.uniform1f(m.uniforms.dt,E),this.blit(n.write[1]),n.swap(),f.use(),e.uniform2f(f.uniforms.texelSize,1/r,1/t),e.uniform1i(f.uniforms.uVelocity,n.read[2]),this.blit(u[1]),h.use();let p=o.read[2];e.activeTexture(e.TEXTURE0+p),e.bindTexture(e.TEXTURE_2D,o.read[0]),e.uniform1i(h.uniforms.uTexture,p),e.uniform1f(h.uniforms.value,c.PRESSURE_DISSIPATION),this.blit(o.write[1]),o.swap(),g.use(),e.uniform2f(g.uniforms.texelSize,1/r,1/t),e.uniform1i(g.uniforms.uDivergence,u[2]),p=o.read[2],e.uniform1i(g.uniforms.uPressure,p),e.activeTexture(e.TEXTURE0+p);for(let r=0;r<c.PRESSURE_ITERATIONS;r++)e.bindTexture(e.TEXTURE_2D,o.read[0]),this.blit(o.write[1]),o.swap();T.use(),e.uniform2f(T.uniforms.texelSize,1/r,1/t),e.uniform1i(T.uniforms.uPressure,o.read[2]),e.uniform1i(T.uniforms.uVelocity,n.read[2]),this.blit(n.write[1]),n.swap(),e.viewport(0,0,e.drawingBufferWidth,e.drawingBufferHeight),d.use(),e.uniform1i(d.uniforms.uTexture,a.read[2]),this.blit(null);requestAnimationFrame(this.update.bind(this))}splat(e,r,t,i,n){let{canvas:a,gl:o,velocity:u,density:s,splatProgram:l}=this;l.use(),o.uniform1i(l.uniforms.uTarget,u.read[2]),o.uniform1f(l.uniforms.aspectRatio,a.width/a.height),o.uniform2f(l.uniforms.point,e/a.width,1-r/a.height),o.uniform3f(l.uniforms.color,t,-i,1),o.uniform1f(l.uniforms.radius,c.SPLAT_RADIUS),this.blit(u.write[1]),u.swap(),o.uniform1i(l.uniforms.uTarget,s.read[2]),o.uniform3f(l.uniforms.color,.3*n[0],.3*n[1],.3*n[2]),this.blit(s.write[1]),s.swap()}multipleSplats(e){for(let r=0;r<e;r++){const e=[10*Math.random(),10*Math.random(),10*Math.random()],r=canvas.width*Math.random(),t=canvas.height*Math.random(),i=1e3*(Math.random()-.5),n=1e3*(Math.random()-.5);this.splat(r,t,i,n,e)}}resizeCanvas(){let{canvas:e}=this;e.width==e.clientWidth&&e.height==e.clientHeight||(e.width=e.clientWidth,e.height=e.clientHeight,this.initFramebuffers())}}).run()}();
